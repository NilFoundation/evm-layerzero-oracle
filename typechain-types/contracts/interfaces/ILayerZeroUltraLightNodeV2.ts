/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ILayerZeroUltraLightNodeV2Interface extends utils.Interface {
  functions: {
    "accruedNativeFee(address)": FunctionFragment;
    "hashLookup(address,uint16,bytes32,bytes32)": FunctionFragment;
    "updateHash(uint16,bytes32,uint256,bytes32)": FunctionFragment;
    "withdrawNative(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedNativeFee"
      | "hashLookup"
      | "updateHash"
      | "withdrawNative"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedNativeFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLookup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILayerZeroUltraLightNodeV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILayerZeroUltraLightNodeV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLookup(
      _oracle: PromiseOrValue<string>,
      _srcChainId: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _receiptsHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accruedNativeFee(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLookup(
    _oracle: PromiseOrValue<string>,
    _srcChainId: PromiseOrValue<BigNumberish>,
    _blockHash: PromiseOrValue<BytesLike>,
    _receiptsHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateHash(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _lookupHash: PromiseOrValue<BytesLike>,
    _confirmations: PromiseOrValue<BigNumberish>,
    _blockData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLookup(
      _oracle: PromiseOrValue<string>,
      _srcChainId: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _receiptsHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLookup(
      _oracle: PromiseOrValue<string>,
      _srcChainId: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _receiptsHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedNativeFee(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLookup(
      _oracle: PromiseOrValue<string>,
      _srcChainId: PromiseOrValue<BigNumberish>,
      _blockHash: PromiseOrValue<BytesLike>,
      _receiptsHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateHash(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _lookupHash: PromiseOrValue<BytesLike>,
      _confirmations: PromiseOrValue<BigNumberish>,
      _blockData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
