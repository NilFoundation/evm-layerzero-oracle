/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SubscriptionStruct = {
  sourceChainId: PromiseOrValue<BigNumberish>;
  sourceAddress: PromiseOrValue<string>;
  callbackAddress: PromiseOrValue<string>;
  eventSig: PromiseOrValue<BytesLike>;
};

export type SubscriptionStructOutput = [number, string, string, string] & {
  sourceChainId: number;
  sourceAddress: string;
  callbackAddress: string;
  eventSig: string;
};

export interface LoremIpsumPublisherInterface extends utils.Interface {
  functions: {
    "eventsPublished(bytes32)": FunctionFragment;
    "publishEvent(bytes,bytes32[],bytes32,bytes[],bytes,uint256,(uint32,address,address,bytes32))": FunctionFragment;
    "subscriptions(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "eventsPublished" | "publishEvent" | "subscriptions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eventsPublished",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishEvent",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      SubscriptionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "eventsPublished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;

  events: {
    "Publish(bytes32,uint32,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Publish"): EventFragment;
}

export interface PublishEventObject {
  subscriptionId: string;
  sourceChainId: number;
  sourceAddress: string;
  callbackAddress: string;
  success: boolean;
}
export type PublishEvent = TypedEvent<
  [string, number, string, string, boolean],
  PublishEventObject
>;

export type PublishEventFilter = TypedEventFilter<PublishEvent>;

export interface LoremIpsumPublisher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoremIpsumPublisherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eventsPublished(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    publishEvent(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      subscription: SubscriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  eventsPublished(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  publishEvent(
    srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
    receiptsRootProof: PromiseOrValue<BytesLike>[],
    receiptsRoot: PromiseOrValue<BytesLike>,
    receiptProof: PromiseOrValue<BytesLike>[],
    txIndexRLPEncoded: PromiseOrValue<BytesLike>,
    logIndex: PromiseOrValue<BigNumberish>,
    subscription: SubscriptionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    eventsPublished(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    publishEvent(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      subscription: SubscriptionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "Publish(bytes32,uint32,address,address,bool)"(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      sourceAddress?: PromiseOrValue<string> | null,
      callbackAddress?: null,
      success?: null
    ): PublishEventFilter;
    Publish(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      sourceAddress?: PromiseOrValue<string> | null,
      callbackAddress?: null,
      success?: null
    ): PublishEventFilter;
  };

  estimateGas: {
    eventsPublished(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishEvent(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      subscription: SubscriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eventsPublished(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishEvent(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      subscription: SubscriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
