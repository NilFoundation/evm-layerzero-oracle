/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type SubscriptionStruct = {
  sourceChainId: PromiseOrValue<BigNumberish>;
  sourceAddress: PromiseOrValue<string>;
  callbackAddress: PromiseOrValue<string>;
  eventSig: PromiseOrValue<BytesLike>;
};

export type SubscriptionStructOutput = [number, string, string, string] & {
  sourceChainId: number;
  sourceAddress: string;
  callbackAddress: string;
  eventSig: string;
};

export interface ISubscriberInterface extends utils.Interface {
  functions: {
    "subscribe(uint32,address,address,bytes32,uint64,uint64)": FunctionFragment;
    "unsubscribe(uint32,address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "subscribe" | "unsubscribe"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;

  events: {
    "Subscribe(bytes32,uint64,uint64,tuple)": EventFragment;
    "Unsubscribe(bytes32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Subscribe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscribe"): EventFragment;
}

export interface SubscribeEventObject {
  subscriptionId: string;
  startSlot: BigNumber;
  endSlot: BigNumber;
  subscription: SubscriptionStructOutput;
}
export type SubscribeEvent = TypedEvent<
  [string, BigNumber, BigNumber, SubscriptionStructOutput],
  SubscribeEventObject
>;

export type SubscribeEventFilter = TypedEventFilter<SubscribeEvent>;

export interface UnsubscribeEventObject {
  subscriptionId: string;
  subscription: SubscriptionStructOutput;
}
export type UnsubscribeEvent = TypedEvent<
  [string, SubscriptionStructOutput],
  UnsubscribeEventObject
>;

export type UnsubscribeEventFilter = TypedEventFilter<UnsubscribeEvent>;

export interface ISubscriber extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubscriberInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    subscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      callbackAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      startSlot: PromiseOrValue<BigNumberish>,
      endSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsubscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  subscribe(
    sourceChainId: PromiseOrValue<BigNumberish>,
    sourceAddress: PromiseOrValue<string>,
    callbackAddress: PromiseOrValue<string>,
    eventSig: PromiseOrValue<BytesLike>,
    startSlot: PromiseOrValue<BigNumberish>,
    endSlot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsubscribe(
    sourceChainId: PromiseOrValue<BigNumberish>,
    sourceAddress: PromiseOrValue<string>,
    eventSig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    subscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      callbackAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      startSlot: PromiseOrValue<BigNumberish>,
      endSlot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    unsubscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Subscribe(bytes32,uint64,uint64,tuple)"(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      startSlot?: PromiseOrValue<BigNumberish> | null,
      endSlot?: PromiseOrValue<BigNumberish> | null,
      subscription?: null
    ): SubscribeEventFilter;
    Subscribe(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      startSlot?: PromiseOrValue<BigNumberish> | null,
      endSlot?: PromiseOrValue<BigNumberish> | null,
      subscription?: null
    ): SubscribeEventFilter;

    "Unsubscribe(bytes32,tuple)"(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      subscription?: null
    ): UnsubscribeEventFilter;
    Unsubscribe(
      subscriptionId?: PromiseOrValue<BytesLike> | null,
      subscription?: null
    ): UnsubscribeEventFilter;
  };

  estimateGas: {
    subscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      callbackAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      startSlot: PromiseOrValue<BigNumberish>,
      endSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsubscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    subscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      callbackAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      startSlot: PromiseOrValue<BigNumberish>,
      endSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      sourceChainId: PromiseOrValue<BigNumberish>,
      sourceAddress: PromiseOrValue<string>,
      eventSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
