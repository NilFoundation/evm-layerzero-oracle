/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RequestDataStruct = {
  nonce: PromiseOrValue<BigNumberish>;
  targetContract: PromiseOrValue<string>;
  targetCalldata: PromiseOrValue<BytesLike>;
  callbackContract: PromiseOrValue<string>;
};

export type RequestDataStructOutput = [BigNumber, string, string, string] & {
  nonce: BigNumber;
  targetContract: string;
  targetCalldata: string;
  callbackContract: string;
};

export interface LoremIpsumOracleFulfillerInterface extends utils.Interface {
  functions: {
    "fulfillCrossChainRequest(uint32,address,(uint256,address,bytes,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "fulfillCrossChainRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfillCrossChainRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RequestDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillCrossChainRequest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LoremIpsumOracleFulfiller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoremIpsumOracleFulfillerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillCrossChainRequest(
      _oracleChain: PromiseOrValue<BigNumberish>,
      _oracleAddress: PromiseOrValue<string>,
      _requestData: RequestDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fulfillCrossChainRequest(
    _oracleChain: PromiseOrValue<BigNumberish>,
    _oracleAddress: PromiseOrValue<string>,
    _requestData: RequestDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fulfillCrossChainRequest(
      _oracleChain: PromiseOrValue<BigNumberish>,
      _oracleAddress: PromiseOrValue<string>,
      _requestData: RequestDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fulfillCrossChainRequest(
      _oracleChain: PromiseOrValue<BigNumberish>,
      _oracleAddress: PromiseOrValue<string>,
      _requestData: RequestDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillCrossChainRequest(
      _oracleChain: PromiseOrValue<BigNumberish>,
      _oracleAddress: PromiseOrValue<string>,
      _requestData: RequestDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
