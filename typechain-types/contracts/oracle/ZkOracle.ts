/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type LightClientUpdateStruct = {
  attestedSlot: PromiseOrValue<BigNumberish>;
  finalizedSlot: PromiseOrValue<BigNumberish>;
  participation: PromiseOrValue<BigNumberish>;
  finalizedHeaderRoot: PromiseOrValue<BytesLike>;
  executionStateRoot: PromiseOrValue<BytesLike>;
  proof: PromiseOrValue<BytesLike>;
};

export type LightClientUpdateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  attestedSlot: BigNumber;
  finalizedSlot: BigNumber;
  participation: BigNumber;
  finalizedHeaderRoot: string;
  executionStateRoot: string;
  proof: string;
};

export interface ZkOracleInterface extends utils.Interface {
  functions: {
    "assignJob(uint16,uint16,uint64,address)": FunctionFragment;
    "chainPriceLookup(uint16,uint16)": FunctionFragment;
    "feeBalance()": FunctionFragment;
    "getFee(uint16,uint16,uint64,address)": FunctionFragment;
    "getLzUln(uint256)": FunctionFragment;
    "getLzUlnLength()": FunctionFragment;
    "layerZeroEndpoint()": FunctionFragment;
    "owner()": FunctionFragment;
    "processRequest(uint16,uint16,address,(uint256,uint256,uint256,bytes32,bytes32,bytes))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLayerZeroEndpoint(address)": FunctionFragment;
    "setLightClient(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignJob"
      | "chainPriceLookup"
      | "feeBalance"
      | "getFee"
      | "getLzUln"
      | "getLzUlnLength"
      | "layerZeroEndpoint"
      | "owner"
      | "processRequest"
      | "renounceOwnership"
      | "setLayerZeroEndpoint"
      | "setLightClient"
      | "transferOwnership"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignJob",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chainPriceLookup",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLzUln",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLzUlnLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "layerZeroEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      LightClientUpdateStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLayerZeroEndpoint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLightClient",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainPriceLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLzUln", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLzUlnLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "layerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLayerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLightClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "ModLayerZeroEndpoint(address,address)": EventFragment;
    "OracleNotified(uint16,uint16,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawFee(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModLayerZeroEndpoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleNotified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFee"): EventFragment;
}

export interface ModLayerZeroEndpointEventObject {
  oldLayerZeroEndpoint: string;
  newLayerZeroEndpoint: string;
}
export type ModLayerZeroEndpointEvent = TypedEvent<
  [string, string],
  ModLayerZeroEndpointEventObject
>;

export type ModLayerZeroEndpointEventFilter =
  TypedEventFilter<ModLayerZeroEndpointEvent>;

export interface OracleNotifiedEventObject {
  dstChainId: number;
  _outboundProofType: number;
  blockConfirmations: BigNumber;
  ua: string;
  fee: BigNumber;
}
export type OracleNotifiedEvent = TypedEvent<
  [number, number, BigNumber, string, BigNumber],
  OracleNotifiedEventObject
>;

export type OracleNotifiedEventFilter = TypedEventFilter<OracleNotifiedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawFeeEventObject {
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeeEvent = TypedEvent<
  [string, BigNumber],
  WithdrawFeeEventObject
>;

export type WithdrawFeeEventFilter = TypedEventFilter<WithdrawFeeEvent>;

export interface ZkOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chainPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getLzUln(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLzUlnLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processRequest(
      srcChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      userApplication: PromiseOrValue<string>,
      lcUpdate: LightClientUpdateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLightClient(
      _lightClient: PromiseOrValue<string>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assignJob(
    _dstChainId: PromiseOrValue<BigNumberish>,
    __outboundProofType: PromiseOrValue<BigNumberish>,
    _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chainPriceLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    __outboundProofType: PromiseOrValue<BigNumberish>,
    _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLzUln(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLzUlnLength(overrides?: CallOverrides): Promise<BigNumber>;

  layerZeroEndpoint(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processRequest(
    srcChainId: PromiseOrValue<BigNumberish>,
    _outboundProofType: PromiseOrValue<BigNumberish>,
    userApplication: PromiseOrValue<string>,
    lcUpdate: LightClientUpdateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayerZeroEndpoint(
    _layerZeroEndpoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLightClient(
    _lightClient: PromiseOrValue<string>,
    _userApplication: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLzUln(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLzUlnLength(overrides?: CallOverrides): Promise<BigNumber>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processRequest(
      srcChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      userApplication: PromiseOrValue<string>,
      lcUpdate: LightClientUpdateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLightClient(
      _lightClient: PromiseOrValue<string>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ModLayerZeroEndpoint(address,address)"(
      oldLayerZeroEndpoint?: null,
      newLayerZeroEndpoint?: null
    ): ModLayerZeroEndpointEventFilter;
    ModLayerZeroEndpoint(
      oldLayerZeroEndpoint?: null,
      newLayerZeroEndpoint?: null
    ): ModLayerZeroEndpointEventFilter;

    "OracleNotified(uint16,uint16,uint256,address,uint256)"(
      dstChainId?: null,
      _outboundProofType?: null,
      blockConfirmations?: null,
      ua?: null,
      fee?: null
    ): OracleNotifiedEventFilter;
    OracleNotified(
      dstChainId?: null,
      _outboundProofType?: null,
      blockConfirmations?: null,
      ua?: null,
      fee?: null
    ): OracleNotifiedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WithdrawFee(address,uint256)"(
      receiver?: null,
      amount?: null
    ): WithdrawFeeEventFilter;
    WithdrawFee(receiver?: null, amount?: null): WithdrawFeeEventFilter;
  };

  estimateGas: {
    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chainPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLzUln(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLzUlnLength(overrides?: CallOverrides): Promise<BigNumber>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processRequest(
      srcChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      userApplication: PromiseOrValue<string>,
      lcUpdate: LightClientUpdateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLightClient(
      _lightClient: PromiseOrValue<string>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chainPriceLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      __outboundProofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLzUln(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLzUlnLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processRequest(
      srcChainId: PromiseOrValue<BigNumberish>,
      _outboundProofType: PromiseOrValue<BigNumberish>,
      userApplication: PromiseOrValue<string>,
      lcUpdate: LightClientUpdateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLightClient(
      _lightClient: PromiseOrValue<string>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
