/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LoremIpsumOracleInterface extends utils.Interface {
  functions: {
    "fulfiller()": FunctionFragment;
    "fulfillerChainId()": FunctionFragment;
    "handleMessage(uint32,address,bytes)": FunctionFragment;
    "nextNonce()": FunctionFragment;
    "requestCrossChain(address,bytes,address)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "router()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfiller"
      | "fulfillerChainId"
      | "handleMessage"
      | "nextNonce"
      | "requestCrossChain"
      | "requests"
      | "router"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fulfiller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillerChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "nextNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestCrossChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;

  decodeFunctionResult(functionFragment: "fulfiller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillerChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;

  events: {
    "CrossChainRequestSent(uint256,address,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossChainRequestSent"): EventFragment;
}

export interface CrossChainRequestSentEventObject {
  nonce: BigNumber;
  targetContract: string;
  targetCalldata: string;
  callbackContract: string;
}
export type CrossChainRequestSentEvent = TypedEvent<
  [BigNumber, string, string, string],
  CrossChainRequestSentEventObject
>;

export type CrossChainRequestSentEventFilter =
  TypedEventFilter<CrossChainRequestSentEvent>;

export interface LoremIpsumOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoremIpsumOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfiller(overrides?: CallOverrides): Promise<[string]>;

    fulfillerChainId(overrides?: CallOverrides): Promise<[number]>;

    handleMessage(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _sourceAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestCrossChain(
      _targetContract: PromiseOrValue<string>,
      _targetCalldata: PromiseOrValue<BytesLike>,
      _callbackContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    router(overrides?: CallOverrides): Promise<[string]>;
  };

  fulfiller(overrides?: CallOverrides): Promise<string>;

  fulfillerChainId(overrides?: CallOverrides): Promise<number>;

  handleMessage(
    _sourceChainId: PromiseOrValue<BigNumberish>,
    _sourceAddress: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextNonce(overrides?: CallOverrides): Promise<BigNumber>;

  requestCrossChain(
    _targetContract: PromiseOrValue<string>,
    _targetCalldata: PromiseOrValue<BytesLike>,
    _callbackContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fulfiller(overrides?: CallOverrides): Promise<string>;

    fulfillerChainId(overrides?: CallOverrides): Promise<number>;

    handleMessage(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _sourceAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    nextNonce(overrides?: CallOverrides): Promise<BigNumber>;

    requestCrossChain(
      _targetContract: PromiseOrValue<string>,
      _targetCalldata: PromiseOrValue<BytesLike>,
      _callbackContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CrossChainRequestSent(uint256,address,bytes,address)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      targetContract?: null,
      targetCalldata?: null,
      callbackContract?: null
    ): CrossChainRequestSentEventFilter;
    CrossChainRequestSent(
      nonce?: PromiseOrValue<BigNumberish> | null,
      targetContract?: null,
      targetCalldata?: null,
      callbackContract?: null
    ): CrossChainRequestSentEventFilter;
  };

  estimateGas: {
    fulfiller(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillerChainId(overrides?: CallOverrides): Promise<BigNumber>;

    handleMessage(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _sourceAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextNonce(overrides?: CallOverrides): Promise<BigNumber>;

    requestCrossChain(
      _targetContract: PromiseOrValue<string>,
      _targetCalldata: PromiseOrValue<BytesLike>,
      _callbackContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfiller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillerChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleMessage(
      _sourceChainId: PromiseOrValue<BigNumberish>,
      _sourceAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestCrossChain(
      _targetContract: PromiseOrValue<string>,
      _targetCalldata: PromiseOrValue<BytesLike>,
      _callbackContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
