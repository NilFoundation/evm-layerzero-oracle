/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SourceAMBInterface extends utils.Interface {
  functions: {
    "nonce()": FunctionFragment;
    "send(uint32,address,bytes)": FunctionFragment;
    "send(uint32,bytes32,bytes)": FunctionFragment;
    "sendingEnabled()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "nonce"
      | "send(uint32,address,bytes)"
      | "send(uint32,bytes32,bytes)"
      | "sendingEnabled"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send(uint32,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint32,bytes32,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "send(uint32,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "SentMessage(uint64,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
}

export interface SentMessageEventObject {
  nonce: BigNumber;
  msgHash: string;
  message: string;
}
export type SentMessageEvent = TypedEvent<
  [BigNumber, string, string],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface SourceAMB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SourceAMBInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "send(uint32,address,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send(uint32,bytes32,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  "send(uint32,address,bytes)"(
    destinationChainId: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send(uint32,bytes32,bytes)"(
    destinationChainId: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendingEnabled(overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "send(uint32,address,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "send(uint32,bytes32,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    sendingEnabled(overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "SentMessage(uint64,bytes32,bytes)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): SentMessageEventFilter;
    SentMessage(
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): SentMessageEventFilter;
  };

  estimateGas: {
    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "send(uint32,address,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send(uint32,bytes32,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "send(uint32,address,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send(uint32,bytes32,bytes)"(
      destinationChainId: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
