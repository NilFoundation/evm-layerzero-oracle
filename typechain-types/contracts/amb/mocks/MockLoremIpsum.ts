/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type MessageStruct = {
  version: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  sourceChainId: PromiseOrValue<BigNumberish>;
  sourceAddress: PromiseOrValue<string>;
  destinationChainId: PromiseOrValue<BigNumberish>;
  destinationAddress: PromiseOrValue<BytesLike>;
  data: PromiseOrValue<BytesLike>;
};

export type MessageStructOutput = [
  number,
  BigNumber,
  number,
  string,
  number,
  string,
  string
] & {
  version: number;
  nonce: BigNumber;
  sourceChainId: number;
  sourceAddress: string;
  destinationChainId: number;
  destinationAddress: string;
  data: string;
};

export interface MockLoremIpsumInterface extends utils.Interface {
  functions: {
    "_executeMessage((uint8,uint64,uint32,address,uint32,bytes32,bytes))": FunctionFragment;
    "_getMessageAndRoot(uint32,bytes32,bytes)": FunctionFragment;
    "_send(uint32,bytes32,bytes)": FunctionFragment;
    "addMessageReceiver(uint32,address)": FunctionFragment;
    "executeNextMessage()": FunctionFragment;
    "send(uint32,address,bytes)": FunctionFragment;
    "send(uint32,bytes32,bytes)": FunctionFragment;
    "sentMessages(uint64)": FunctionFragment;
    "telepathyReceivers(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_executeMessage"
      | "_getMessageAndRoot"
      | "_send"
      | "addMessageReceiver"
      | "executeNextMessage"
      | "send(uint32,address,bytes)"
      | "send(uint32,bytes32,bytes)"
      | "sentMessages"
      | "telepathyReceivers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_executeMessage",
    values: [MessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMessageAndRoot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMessageReceiver",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeNextMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint32,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint32,bytes32,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMessages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "telepathyReceivers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMessageAndRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMessageReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeNextMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint32,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "telepathyReceivers",
    data: BytesLike
  ): Result;

  events: {
    "SentMessage(uint64,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
}

export interface SentMessageEventObject {
  nonce: BigNumber;
  msgHash: string;
  message: string;
}
export type SentMessageEvent = TypedEvent<
  [BigNumber, string, string],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface MockLoremIpsum extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLoremIpsumInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _executeMessage(
      message: MessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _getMessageAndRoot(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MessageStructOutput, string, string]>;

    _send(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMessageReceiver(
      _chainId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeNextMessage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send(uint32,address,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send(uint32,bytes32,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sentMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, number, string, string] & {
        version: number;
        nonce: BigNumber;
        sourceChainId: number;
        sourceAddress: string;
        destinationChainId: number;
        destinationAddress: string;
        data: string;
      }
    >;

    telepathyReceivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  _executeMessage(
    message: MessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _getMessageAndRoot(
    _destinationChainId: PromiseOrValue<BigNumberish>,
    _destinationAddress: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[MessageStructOutput, string, string]>;

  _send(
    _destinationChainId: PromiseOrValue<BigNumberish>,
    _destinationAddress: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMessageReceiver(
    _chainId: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeNextMessage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send(uint32,address,bytes)"(
    _destinationChainId: PromiseOrValue<BigNumberish>,
    _destinationAddress: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send(uint32,bytes32,bytes)"(
    _destinationChainId: PromiseOrValue<BigNumberish>,
    _destinationAddress: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sentMessages(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, string, number, string, string] & {
      version: number;
      nonce: BigNumber;
      sourceChainId: number;
      sourceAddress: string;
      destinationChainId: number;
      destinationAddress: string;
      data: string;
    }
  >;

  telepathyReceivers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    _executeMessage(
      message: MessageStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _getMessageAndRoot(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MessageStructOutput, string, string]>;

    _send(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    addMessageReceiver(
      _chainId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeNextMessage(overrides?: CallOverrides): Promise<boolean>;

    "send(uint32,address,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "send(uint32,bytes32,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    sentMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, number, string, string] & {
        version: number;
        nonce: BigNumber;
        sourceChainId: number;
        sourceAddress: string;
        destinationChainId: number;
        destinationAddress: string;
        data: string;
      }
    >;

    telepathyReceivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "SentMessage(uint64,bytes32,bytes)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): SentMessageEventFilter;
    SentMessage(
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): SentMessageEventFilter;
  };

  estimateGas: {
    _executeMessage(
      message: MessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _getMessageAndRoot(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _send(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMessageReceiver(
      _chainId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeNextMessage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send(uint32,address,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send(uint32,bytes32,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sentMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    telepathyReceivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _executeMessage(
      message: MessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _getMessageAndRoot(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _send(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMessageReceiver(
      _chainId: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeNextMessage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send(uint32,address,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send(uint32,bytes32,bytes)"(
      _destinationChainId: PromiseOrValue<BigNumberish>,
      _destinationAddress: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sentMessages(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    telepathyReceivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
