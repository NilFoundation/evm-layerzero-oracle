/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MockTargetAMBInterface extends utils.Interface {
  functions: {
    "MIN_LIGHT_CLIENT_DELAY()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "broadcasters(uint32)": FunctionFragment;
    "executeMessage(uint64,bytes,bytes[],bytes[])": FunctionFragment;
    "executeMessageFromLog(bytes,bytes,bytes32[],bytes32,bytes[],bytes,uint256)": FunctionFragment;
    "frozen(uint32)": FunctionFragment;
    "lightClients(uint32)": FunctionFragment;
    "messageStatus(bytes32)": FunctionFragment;
    "sourceChainIds(uint256)": FunctionFragment;
    "sourceChainIdsLength()": FunctionFragment;
    "storageRootCache(bytes32)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_LIGHT_CLIENT_DELAY"
      | "VERSION"
      | "broadcasters"
      | "executeMessage"
      | "executeMessageFromLog"
      | "frozen"
      | "lightClients"
      | "messageStatus"
      | "sourceChainIds"
      | "sourceChainIdsLength"
      | "storageRootCache"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_LIGHT_CLIENT_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "broadcasters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageFromLog",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "frozen",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lightClients",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChainIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChainIdsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storageRootCache",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_LIGHT_CLIENT_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "broadcasters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageFromLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lightClients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChainIdsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageRootCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ExecutedMessage(uint32,uint64,bytes32,bytes,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface ExecutedMessageEventObject {
  sourceChainId: number;
  nonce: BigNumber;
  msgHash: string;
  message: string;
  status: boolean;
}
export type ExecutedMessageEvent = TypedEvent<
  [number, BigNumber, string, string, boolean],
  ExecutedMessageEventObject
>;

export type ExecutedMessageEventFilter = TypedEventFilter<ExecutedMessageEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MockTargetAMB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockTargetAMBInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_LIGHT_CLIENT_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    broadcasters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeMessage(
      slot: PromiseOrValue<BigNumberish>,
      messageBytes: PromiseOrValue<BytesLike>,
      accountProof: PromiseOrValue<BytesLike>[],
      storageProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeMessageFromLog(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      messageBytes: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    frozen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lightClients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    messageStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    sourceChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    sourceChainIdsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    storageRootCache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  MIN_LIGHT_CLIENT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  broadcasters(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  executeMessage(
    slot: PromiseOrValue<BigNumberish>,
    messageBytes: PromiseOrValue<BytesLike>,
    accountProof: PromiseOrValue<BytesLike>[],
    storageProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeMessageFromLog(
    srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
    messageBytes: PromiseOrValue<BytesLike>,
    receiptsRootProof: PromiseOrValue<BytesLike>[],
    receiptsRoot: PromiseOrValue<BytesLike>,
    receiptProof: PromiseOrValue<BytesLike>[],
    txIndexRLPEncoded: PromiseOrValue<BytesLike>,
    logIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  frozen(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lightClients(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  messageStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  sourceChainIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  sourceChainIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

  storageRootCache(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    MIN_LIGHT_CLIENT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    broadcasters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeMessage(
      slot: PromiseOrValue<BigNumberish>,
      messageBytes: PromiseOrValue<BytesLike>,
      accountProof: PromiseOrValue<BytesLike>[],
      storageProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeMessageFromLog(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      messageBytes: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    frozen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lightClients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    messageStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    sourceChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    sourceChainIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

    storageRootCache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "ExecutedMessage(uint32,uint64,bytes32,bytes,bool)"(
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null,
      status?: null
    ): ExecutedMessageEventFilter;
    ExecutedMessage(
      sourceChainId?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      msgHash?: PromiseOrValue<BytesLike> | null,
      message?: null,
      status?: null
    ): ExecutedMessageEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    MIN_LIGHT_CLIENT_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    broadcasters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMessage(
      slot: PromiseOrValue<BigNumberish>,
      messageBytes: PromiseOrValue<BytesLike>,
      accountProof: PromiseOrValue<BytesLike>[],
      storageProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeMessageFromLog(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      messageBytes: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    frozen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lightClients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sourceChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sourceChainIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

    storageRootCache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_LIGHT_CLIENT_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    broadcasters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMessage(
      slot: PromiseOrValue<BigNumberish>,
      messageBytes: PromiseOrValue<BytesLike>,
      accountProof: PromiseOrValue<BytesLike>[],
      storageProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageFromLog(
      srcSlotTxSlotPack: PromiseOrValue<BytesLike>,
      messageBytes: PromiseOrValue<BytesLike>,
      receiptsRootProof: PromiseOrValue<BytesLike>[],
      receiptsRoot: PromiseOrValue<BytesLike>,
      receiptProof: PromiseOrValue<BytesLike>[],
      txIndexRLPEncoded: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    frozen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lightClients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sourceChainIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sourceChainIdsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storageRootCache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
