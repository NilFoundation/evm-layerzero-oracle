/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PlaceholderProofStruct = {
  blob: PromiseOrValue<BytesLike>;
  init_params: PromiseOrValue<BigNumberish>[];
  columns_rotations: PromiseOrValue<BigNumberish>[][];
};

export type PlaceholderProofStructOutput = [
  string,
  BigNumber[],
  BigNumber[][]
] & {
  blob: string;
  init_params: BigNumber[];
  columns_rotations: BigNumber[][];
};

export type LightClientStepStruct = {
  attestedSlot: PromiseOrValue<BigNumberish>;
  finalizedSlot: PromiseOrValue<BigNumberish>;
  participation: PromiseOrValue<BigNumberish>;
  finalizedHeaderRoot: PromiseOrValue<BytesLike>;
  executionStateRoot: PromiseOrValue<BytesLike>;
  proof: PlaceholderProofStruct;
};

export type LightClientStepStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  PlaceholderProofStructOutput
] & {
  attestedSlot: BigNumber;
  finalizedSlot: BigNumber;
  participation: BigNumber;
  finalizedHeaderRoot: string;
  executionStateRoot: string;
  proof: PlaceholderProofStructOutput;
};

export type LightClientRotateStruct = {
  step: LightClientStepStruct;
  syncCommitteeSSZ: PromiseOrValue<BytesLike>;
  syncCommitteePoseidon: PromiseOrValue<BytesLike>;
  proof: PlaceholderProofStruct;
};

export type LightClientRotateStructOutput = [
  LightClientStepStructOutput,
  string,
  string,
  PlaceholderProofStructOutput
] & {
  step: LightClientStepStructOutput;
  syncCommitteeSSZ: string;
  syncCommitteePoseidon: string;
  proof: PlaceholderProofStructOutput;
};

export interface EthereumLightClientInterface extends utils.Interface {
  functions: {
    "FINALITY_THRESHOLD()": FunctionFragment;
    "GENESIS_TIME()": FunctionFragment;
    "GENESIS_VALIDATORS_ROOT()": FunctionFragment;
    "SECONDS_PER_SLOT()": FunctionFragment;
    "SLOTS_PER_PERIOD()": FunctionFragment;
    "SOURCE_CHAIN_ID()": FunctionFragment;
    "assignJob(uint16,uint16,uint64,address)": FunctionFragment;
    "consistent()": FunctionFragment;
    "getFee(uint16,uint16,uint64,address)": FunctionFragment;
    "head()": FunctionFragment;
    "headers(uint256)": FunctionFragment;
    "layerZeroEndpoint()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rotate(((uint256,uint256,uint256,bytes32,bytes32,(bytes,uint256[],int256[][])),bytes32,bytes32,(bytes,uint256[],int256[][])))": FunctionFragment;
    "setLayerZeroEndpoint(address)": FunctionFragment;
    "setRotateGate(address)": FunctionFragment;
    "setStepGate(address)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "stateRoots(uint256)": FunctionFragment;
    "step((uint256,uint256,uint256,bytes32,bytes32,(bytes,uint256[],int256[][])),address,uint16)": FunctionFragment;
    "syncCommitteePoseidons(uint256)": FunctionFragment;
    "timestamps(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FINALITY_THRESHOLD"
      | "GENESIS_TIME"
      | "GENESIS_VALIDATORS_ROOT"
      | "SECONDS_PER_SLOT"
      | "SLOTS_PER_PERIOD"
      | "SOURCE_CHAIN_ID"
      | "assignJob"
      | "consistent"
      | "getFee"
      | "head"
      | "headers"
      | "layerZeroEndpoint"
      | "owner"
      | "renounceOwnership"
      | "rotate"
      | "setLayerZeroEndpoint"
      | "setRotateGate"
      | "setStepGate"
      | "setVerifier"
      | "stateRoots"
      | "step"
      | "syncCommitteePoseidons"
      | "timestamps"
      | "transferOwnership"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FINALITY_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_VALIDATORS_ROOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLOTS_PER_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOURCE_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignJob",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consistent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "head", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "headers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "layerZeroEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rotate",
    values: [LightClientRotateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLayerZeroEndpoint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRotateGate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStepGate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stateRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "step",
    values: [
      LightClientStepStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "syncCommitteePoseidons",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestamps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FINALITY_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_VALIDATORS_ROOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLOTS_PER_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOURCE_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "consistent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "head", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "headers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "layerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rotate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLayerZeroEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRotateGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStepGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateRoots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncCommitteePoseidons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "HeadUpdate(uint256,bytes32)": EventFragment;
    "ModLayerZeroEndpoint(address,address)": EventFragment;
    "OracleNotified(uint16,uint16,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SyncCommitteeUpdate(uint256,bytes32)": EventFragment;
    "WithdrawFee(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HeadUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModLayerZeroEndpoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleNotified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyncCommitteeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFee"): EventFragment;
}

export interface HeadUpdateEventObject {
  slot: BigNumber;
  root: string;
}
export type HeadUpdateEvent = TypedEvent<
  [BigNumber, string],
  HeadUpdateEventObject
>;

export type HeadUpdateEventFilter = TypedEventFilter<HeadUpdateEvent>;

export interface ModLayerZeroEndpointEventObject {
  oldLayerZeroEndpoint: string;
  newLayerZeroEndpoint: string;
}
export type ModLayerZeroEndpointEvent = TypedEvent<
  [string, string],
  ModLayerZeroEndpointEventObject
>;

export type ModLayerZeroEndpointEventFilter =
  TypedEventFilter<ModLayerZeroEndpointEvent>;

export interface OracleNotifiedEventObject {
  dstChainId: number;
  proofType: number;
  blockConfirmations: BigNumber;
  ua: string;
  fee: BigNumber;
}
export type OracleNotifiedEvent = TypedEvent<
  [number, number, BigNumber, string, BigNumber],
  OracleNotifiedEventObject
>;

export type OracleNotifiedEventFilter = TypedEventFilter<OracleNotifiedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SyncCommitteeUpdateEventObject {
  period: BigNumber;
  root: string;
}
export type SyncCommitteeUpdateEvent = TypedEvent<
  [BigNumber, string],
  SyncCommitteeUpdateEventObject
>;

export type SyncCommitteeUpdateEventFilter =
  TypedEventFilter<SyncCommitteeUpdateEvent>;

export interface WithdrawFeeEventObject {
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeeEvent = TypedEvent<
  [string, BigNumber],
  WithdrawFeeEventObject
>;

export type WithdrawFeeEventFilter = TypedEventFilter<WithdrawFeeEvent>;

export interface EthereumLightClient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthereumLightClientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FINALITY_THRESHOLD(overrides?: CallOverrides): Promise<[number]>;

    GENESIS_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    GENESIS_VALIDATORS_ROOT(overrides?: CallOverrides): Promise<[string]>;

    SECONDS_PER_SLOT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SLOTS_PER_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    SOURCE_CHAIN_ID(overrides?: CallOverrides): Promise<[number]>;

    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consistent(overrides?: CallOverrides): Promise<[boolean]>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    head(overrides?: CallOverrides): Promise<[BigNumber]>;

    headers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rotate(
      update: LightClientRotateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRotateGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStepGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      v: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    step(
      update: LightClientStepStruct,
      _userApplication: PromiseOrValue<string>,
      _sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncCommitteePoseidons(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    timestamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FINALITY_THRESHOLD(overrides?: CallOverrides): Promise<number>;

  GENESIS_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  GENESIS_VALIDATORS_ROOT(overrides?: CallOverrides): Promise<string>;

  SECONDS_PER_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  SLOTS_PER_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  SOURCE_CHAIN_ID(overrides?: CallOverrides): Promise<number>;

  assignJob(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _proofType: PromiseOrValue<BigNumberish>,
    _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consistent(overrides?: CallOverrides): Promise<boolean>;

  getFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _proofType: PromiseOrValue<BigNumberish>,
    _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  head(overrides?: CallOverrides): Promise<BigNumber>;

  headers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  layerZeroEndpoint(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rotate(
    update: LightClientRotateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLayerZeroEndpoint(
    _layerZeroEndpoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRotateGate(
    gateArgument: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStepGate(
    gateArgument: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    v: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stateRoots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  step(
    update: LightClientStepStruct,
    _userApplication: PromiseOrValue<string>,
    _sourceChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncCommitteePoseidons(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  timestamps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FINALITY_THRESHOLD(overrides?: CallOverrides): Promise<number>;

    GENESIS_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_VALIDATORS_ROOT(overrides?: CallOverrides): Promise<string>;

    SECONDS_PER_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    SLOTS_PER_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    SOURCE_CHAIN_ID(overrides?: CallOverrides): Promise<number>;

    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consistent(overrides?: CallOverrides): Promise<boolean>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    headers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rotate(
      update: LightClientRotateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRotateGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStepGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(
      v: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    step(
      update: LightClientStepStruct,
      _userApplication: PromiseOrValue<string>,
      _sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncCommitteePoseidons(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    timestamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HeadUpdate(uint256,bytes32)"(
      slot?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null
    ): HeadUpdateEventFilter;
    HeadUpdate(
      slot?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null
    ): HeadUpdateEventFilter;

    "ModLayerZeroEndpoint(address,address)"(
      oldLayerZeroEndpoint?: null,
      newLayerZeroEndpoint?: null
    ): ModLayerZeroEndpointEventFilter;
    ModLayerZeroEndpoint(
      oldLayerZeroEndpoint?: null,
      newLayerZeroEndpoint?: null
    ): ModLayerZeroEndpointEventFilter;

    "OracleNotified(uint16,uint16,uint256,address,uint256)"(
      dstChainId?: null,
      proofType?: null,
      blockConfirmations?: null,
      ua?: null,
      fee?: null
    ): OracleNotifiedEventFilter;
    OracleNotified(
      dstChainId?: null,
      proofType?: null,
      blockConfirmations?: null,
      ua?: null,
      fee?: null
    ): OracleNotifiedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SyncCommitteeUpdate(uint256,bytes32)"(
      period?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null
    ): SyncCommitteeUpdateEventFilter;
    SyncCommitteeUpdate(
      period?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null
    ): SyncCommitteeUpdateEventFilter;

    "WithdrawFee(address,uint256)"(
      receiver?: null,
      amount?: null
    ): WithdrawFeeEventFilter;
    WithdrawFee(receiver?: null, amount?: null): WithdrawFeeEventFilter;
  };

  estimateGas: {
    FINALITY_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_VALIDATORS_ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    SLOTS_PER_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    SOURCE_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consistent(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    headers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rotate(
      update: LightClientRotateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRotateGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStepGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifier(
      v: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    step(
      update: LightClientStepStruct,
      _userApplication: PromiseOrValue<string>,
      _sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncCommitteePoseidons(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FINALITY_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GENESIS_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GENESIS_VALIDATORS_ROOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SECONDS_PER_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLOTS_PER_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SOURCE_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignJob(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consistent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _proofType: PromiseOrValue<BigNumberish>,
      _outboundBlockConfirmation: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layerZeroEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rotate(
      update: LightClientRotateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLayerZeroEndpoint(
      _layerZeroEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRotateGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStepGate(
      gateArgument: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      v: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stateRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step(
      update: LightClientStepStruct,
      _userApplication: PromiseOrValue<string>,
      _sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncCommitteePoseidons(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
