/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "EthereumLightClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumLightClient__factory>;
    getContractFactory(
      name: "IProtocolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolState__factory>;
    getContractFactory(
      name: "IZKLightClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKLightClient__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: "ILayerZeroOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroOracleV2__factory>;
    getContractFactory(
      name: "ILayerZeroUltraLightNodeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUltraLightNodeV2__factory>;
    getContractFactory(
      name: "EthereumLayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumLayerZeroEndpoint__factory>;
    getContractFactory(
      name: "EthereumLayerZeroUltraLightNodeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumLayerZeroUltraLightNodeV2__factory>;
    getContractFactory(
      name: "LightClientUpdateGen",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LightClientUpdateGen__factory>;
    getContractFactory(
      name: "ZkOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkOracle__factory>;

    getContractAt(
      name: "EthereumLightClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumLightClient>;
    getContractAt(
      name: "IProtocolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolState>;
    getContractAt(
      name: "IZKLightClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKLightClient>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ILayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: "ILayerZeroOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroOracleV2>;
    getContractAt(
      name: "ILayerZeroUltraLightNodeV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUltraLightNodeV2>;
    getContractAt(
      name: "EthereumLayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumLayerZeroEndpoint>;
    getContractAt(
      name: "EthereumLayerZeroUltraLightNodeV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumLayerZeroUltraLightNodeV2>;
    getContractAt(
      name: "LightClientUpdateGen",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LightClientUpdateGen>;
    getContractAt(
      name: "ZkOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkOracle>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
