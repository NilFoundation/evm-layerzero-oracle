/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockProtocolState,
  MockProtocolStateInterface,
} from "../../../contracts/mocks/MockProtocolState";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "header",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "stateRoot",
        type: "bytes32",
      },
    ],
    name: "addSlot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "consistent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "head",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "headers",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_head",
        type: "uint256",
      },
    ],
    name: "setHead",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stateRoots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "timestamps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916600190811782555534801561002057600080fd5b506101e9806100306000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638a8700b81161005b5780638a8700b81461010c5780638bc33af31461011f5780638f7dcfa31461013f578063f4cac30d1461014857600080fd5b80630821df29146100825780632bcccca5146100bc57806356f90d79146100de575b600080fd5b6100ba610090366004610168565b60009384526002602090815260408086209490945560038152838520929092556004909152912055565b005b6000546100c99060ff1681565b60405190151581526020015b60405180910390f35b6100fe6100ec36600461019a565b60026020526000908152604090205481565b6040519081526020016100d5565b6100ba61011a36600461019a565b600155565b6100fe61012d36600461019a565b60036020526000908152604090205481565b6100fe60015481565b6100fe61015636600461019a565b60046020526000908152604090205481565b6000806000806080858703121561017e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156101ac57600080fd5b503591905056fea2646970667358221220048cbe80977cb3a5da600e2bf6b415c3b1124708f91e461dae930838eda7287e64736f6c63430008100033";

type MockProtocolStateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockProtocolStateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockProtocolState__factory extends ContractFactory {
  constructor(...args: MockProtocolStateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockProtocolState> {
    return super.deploy(overrides || {}) as Promise<MockProtocolState>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockProtocolState {
    return super.attach(address) as MockProtocolState;
  }
  override connect(signer: Signer): MockProtocolState__factory {
    return super.connect(signer) as MockProtocolState__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProtocolStateInterface {
    return new utils.Interface(_abi) as MockProtocolStateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockProtocolState {
    return new Contract(address, _abi, signerOrProvider) as MockProtocolState;
  }
}
