/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockResponseHandler,
  MockResponseHandlerInterface,
} from "../../../contracts/mocks/MockResponseHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_sourceAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_response_data",
        type: "bytes",
      },
    ],
    name: "handleResponseMessage",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a9f771a14610030575b600080fd5b61004d61003e366004610080565b63154fbb8d60e11b9392505050565b6040516001600160e01b0319909116815260200160405180910390f35b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561009557600080fd5b833563ffffffff811681146100a957600080fd5b925060208401356001600160a01b03811681146100c557600080fd5b9150604084013567ffffffffffffffff808211156100e257600080fd5b818601915086601f8301126100f657600080fd5b8135818111156101085761010861006a565b604051601f8201601f19908116603f011681019083821181831017156101305761013061006a565b8160405282815289602084870101111561014957600080fd5b826020860160208301376000602084830101528095505050505050925092509256fea26469706673582212206f841f1ac176c3a3c5a99cb49e676b903e4d2994941dbd511e9548a98310c48764736f6c63430008100033";

type MockResponseHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockResponseHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockResponseHandler__factory extends ContractFactory {
  constructor(...args: MockResponseHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockResponseHandler> {
    return super.deploy(overrides || {}) as Promise<MockResponseHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockResponseHandler {
    return super.attach(address) as MockResponseHandler;
  }
  override connect(signer: Signer): MockResponseHandler__factory {
    return super.connect(signer) as MockResponseHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockResponseHandlerInterface {
    return new utils.Interface(_abi) as MockResponseHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockResponseHandler {
    return new Contract(address, _abi, signerOrProvider) as MockResponseHandler;
  }
}
