/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LightClientUpdateGen,
  LightClientUpdateGenInterface,
} from "../../../contracts/mocks/LightClientUpdateGen";

const _abi = [
  {
    inputs: [],
    name: "gen",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "attestedSlot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalizedSlot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "participation",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "finalizedHeaderRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "executionStateRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
        ],
        internalType: "struct LightClientUpdate",
        name: "update",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610152806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b42dfa0d14610030575b600080fd5b61003861004e565b6040516100459190610090565b60405180910390f35b61008d6040518060c001604052806000815260200160008152602001600081526020016000801916815260200160008019168152602001606081525090565b90565b600060208083528351818401528084015160408401526040840151606084015260608401516080840152608084015160a084015260a084015160c08085015280518060e086015260005b818110156100f757828101840151868201610100015283016100da565b506101009250600083828701015282601f19601f83011686010193505050509291505056fea2646970667358221220b54941ca5c799c67e517cc7f9695b9f9f6f84e17987032b5dec9d356747485bf64736f6c63430008100033";

type LightClientUpdateGenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LightClientUpdateGenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LightClientUpdateGen__factory extends ContractFactory {
  constructor(...args: LightClientUpdateGenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LightClientUpdateGen> {
    return super.deploy(overrides || {}) as Promise<LightClientUpdateGen>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LightClientUpdateGen {
    return super.attach(address) as LightClientUpdateGen;
  }
  override connect(signer: Signer): LightClientUpdateGen__factory {
    return super.connect(signer) as LightClientUpdateGen__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LightClientUpdateGenInterface {
    return new utils.Interface(_abi) as LightClientUpdateGenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LightClientUpdateGen {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LightClientUpdateGen;
  }
}
