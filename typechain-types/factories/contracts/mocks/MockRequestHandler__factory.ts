/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRequestHandler,
  MockRequestHandlerInterface,
} from "../../../contracts/mocks/MockRequestHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lightClient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "some_random_succes_code",
        type: "uint32",
      },
    ],
    name: "OK",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_sourceAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "handleRequestMessage",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161064338038061064383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6105b0806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b9c7722f14610030575b600080fd5b61004361003e3660046103fb565b610060565b6040516001600160e01b0319909116815260200160405180910390f35b600080546040516367acd47560e01b81526001600160a01b03909116906367acd475906100919085906004016104e6565b600060405180830381600087803b1580156100ab57600080fd5b505af11580156100bf573d6000803e3d6000fd5b50506000805460408051638f7dcfa360e01b815290516001600160a01b0390921694509192508391638f7dcfa39160048083019260209291908290030181865afa158015610111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101359190610534565b604080516020810182905260076060820152666865616465727360c81b608082015290810182905290915060a00160408051601f198184030181529082905280516020909101206356f90d7960e01b825260048201839052906001600160a01b038416906356f90d7990602401602060405180830381865afa1580156101bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e39190610534565b1461022a5760405162461bcd60e51b815260206004820152601260248201527148656164657273206172652077726f6e672160701b60448201526064015b60405180910390fd5b6040805160208101829052600a6060820152697374617465526f6f747360b01b608082015290810182905260a00160408051601f1981840301815290829052805160209091012063f4cac30d60e01b825260048201839052906001600160a01b0384169063f4cac30d90602401602060405180830381865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190610534565b1461031a5760405162461bcd60e51b815260206004820152601260248201527148656164657273206172652077726f6e672160701b6044820152606401610221565b61032581600261054d565b604051638bc33af360e01b8152600481018390526001600160a01b03841690638bc33af390602401602060405180830381865afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e9190610534565b146103d35760405162461bcd60e51b815260206004820152601560248201527474696d657374616d7073206172652077726f6e672160581b6044820152606401610221565b5063b9c7722f60e01b95945050505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561041057600080fd5b833563ffffffff8116811461042457600080fd5b925060208401356001600160a01b038116811461044057600080fd5b9150604084013567ffffffffffffffff8082111561045d57600080fd5b818601915086601f83011261047157600080fd5b813581811115610483576104836103e5565b604051601f8201601f19908116603f011681019083821181831017156104ab576104ab6103e5565b816040528281528960208487010111156104c457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600060208083528351808285015260005b81811015610513578581018301518582016040015282016104f7565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561054657600080fd5b5051919050565b600081600019048311821515161561057557634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220fb2e7e10dbdb740fc5d287dc4a617710295cd3fc60df66621479d2cd7032d01964736f6c63430008100033";

type MockRequestHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRequestHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRequestHandler__factory extends ContractFactory {
  constructor(...args: MockRequestHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lightClient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRequestHandler> {
    return super.deploy(
      _lightClient,
      overrides || {}
    ) as Promise<MockRequestHandler>;
  }
  override getDeployTransaction(
    _lightClient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lightClient, overrides || {});
  }
  override attach(address: string): MockRequestHandler {
    return super.attach(address) as MockRequestHandler;
  }
  override connect(signer: Signer): MockRequestHandler__factory {
    return super.connect(signer) as MockRequestHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRequestHandlerInterface {
    return new utils.Interface(_abi) as MockRequestHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRequestHandler {
    return new Contract(address, _abi, signerOrProvider) as MockRequestHandler;
  }
}
