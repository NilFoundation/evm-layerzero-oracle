/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockEthereumLightClientHandler,
  MockEthereumLightClientHandlerInterface,
} from "../../../contracts/mocks/MockEthereumLightClientHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proofSourceBytes",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101be806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806355c265fe14610030575b600080fd5b61004361003e3660046100d7565b610045565b005b805160208201207fe58452cb9532f7bacf1de985570030c5d6818178d0c3bc271dbe757a0331e6ed146100be5760405162461bcd60e51b815260206004820152601860248201527f50726f6f6620766572696669636174696f6e206661696c210000000000000000604482015260640160405180910390fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100e957600080fd5b813567ffffffffffffffff8082111561010157600080fd5b818401915084601f83011261011557600080fd5b813581811115610127576101276100c1565b604051601f8201601f19908116603f0116810190838211818310171561014f5761014f6100c1565b8160405282815287602084870101111561016857600080fd5b82602086016020830137600092810160200192909252509594505050505056fea26469706673582212207ff500aaf8449e181dfd9007fd4589a2a2704824bd691c3624596be45ef9041664736f6c63430008100033";

type MockEthereumLightClientHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockEthereumLightClientHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockEthereumLightClientHandler__factory extends ContractFactory {
  constructor(...args: MockEthereumLightClientHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockEthereumLightClientHandler> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockEthereumLightClientHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockEthereumLightClientHandler {
    return super.attach(address) as MockEthereumLightClientHandler;
  }
  override connect(signer: Signer): MockEthereumLightClientHandler__factory {
    return super.connect(signer) as MockEthereumLightClientHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockEthereumLightClientHandlerInterface {
    return new utils.Interface(_abi) as MockEthereumLightClientHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockEthereumLightClientHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockEthereumLightClientHandler;
  }
}
