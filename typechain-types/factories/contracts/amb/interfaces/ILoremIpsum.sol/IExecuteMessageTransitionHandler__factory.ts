/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IExecuteMessageTransitionHandler,
  IExecuteMessageTransitionHandlerInterface,
} from "../../../../../contracts/amb/interfaces/ILoremIpsum.sol/IExecuteMessageTransitionHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_nonce",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "_sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_sourceAddress",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_destinationChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_destinationAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_transitionStorageRawData",
        type: "bytes",
      },
    ],
    name: "processExecuteMessageCrossChain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IExecuteMessageTransitionHandler__factory {
  static readonly abi = _abi;
  static createInterface(): IExecuteMessageTransitionHandlerInterface {
    return new utils.Interface(
      _abi
    ) as IExecuteMessageTransitionHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExecuteMessageTransitionHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IExecuteMessageTransitionHandler;
  }
}
