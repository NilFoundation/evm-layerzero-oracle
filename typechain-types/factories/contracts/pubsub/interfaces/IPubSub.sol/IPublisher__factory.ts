/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPublisher,
  IPublisherInterface,
} from "../../../../../contracts/pubsub/interfaces/IPubSub.sol/IPublisher";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "sourceChainId",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "callbackAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "Publish",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "srcSlotTxSlotPack",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "receiptsRootProof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "receiptsRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes[]",
        name: "receiptProof",
        type: "bytes[]",
      },
      {
        internalType: "bytes",
        name: "txIndexRLPEncoded",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "logIndex",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "sourceChainId",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "sourceAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "callbackAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "eventSig",
            type: "bytes32",
          },
        ],
        internalType: "struct Subscription",
        name: "subscription",
        type: "tuple",
      },
    ],
    name: "publishEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPublisher__factory {
  static readonly abi = _abi;
  static createInterface(): IPublisherInterface {
    return new utils.Interface(_abi) as IPublisherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPublisher {
    return new Contract(address, _abi, signerOrProvider) as IPublisher;
  }
}
