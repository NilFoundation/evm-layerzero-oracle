/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISubscriber,
  ISubscriberInterface,
} from "../../../../../contracts/pubsub/interfaces/IPubSub.sol/ISubscriber";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "startSlot",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "endSlot",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "sourceChainId",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "sourceAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "callbackAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "eventSig",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct Subscription",
        name: "subscription",
        type: "tuple",
      },
    ],
    name: "Subscribe",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "sourceChainId",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "sourceAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "callbackAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "eventSig",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct Subscription",
        name: "subscription",
        type: "tuple",
      },
    ],
    name: "Unsubscribe",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "callbackAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "eventSig",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "startSlot",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "endSlot",
        type: "uint64",
      },
    ],
    name: "subscribe",
    outputs: [
      {
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "eventSig",
        type: "bytes32",
      },
    ],
    name: "unsubscribe",
    outputs: [
      {
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISubscriber__factory {
  static readonly abi = _abi;
  static createInterface(): ISubscriberInterface {
    return new utils.Interface(_abi) as ISubscriberInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISubscriber {
    return new Contract(address, _abi, signerOrProvider) as ISubscriber;
  }
}
