/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISubscriptionReceiver,
  ISubscriptionReceiverInterface,
} from "../../../../contracts/pubsub/interfaces/ISubscriptionReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "subscriptionId",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "sourceChainId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "slot",
        type: "uint64",
      },
      {
        internalType: "bytes32[]",
        name: "eventTopics",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "eventdata",
        type: "bytes",
      },
    ],
    name: "handlePublish",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISubscriptionReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): ISubscriptionReceiverInterface {
    return new utils.Interface(_abi) as ISubscriptionReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISubscriptionReceiver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ISubscriptionReceiver;
  }
}
