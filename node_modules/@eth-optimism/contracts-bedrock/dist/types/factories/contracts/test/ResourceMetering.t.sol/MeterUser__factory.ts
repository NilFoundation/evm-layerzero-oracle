/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MeterUser,
  MeterUserInterface,
} from "../../../../contracts/test/ResourceMetering.t.sol/MeterUser";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "params",
    outputs: [
      {
        internalType: "uint128",
        name: "prevBaseFee",
        type: "uint128",
      },
      {
        internalType: "uint64",
        name: "prevBoughtGas",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "prevBlockNum",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "resourceConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "maxResourceLimit",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "elasticityMultiplier",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "baseFeeMaxChangeDenominator",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "minimumBaseFee",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "systemTxMaxGas",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maximumBaseFee",
            type: "uint128",
          },
        ],
        internalType: "struct ResourceMetering.ResourceConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_prevBaseFee",
        type: "uint128",
      },
      {
        internalType: "uint64",
        name: "_prevBoughtGas",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "_prevBlockNum",
        type: "uint64",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_amount",
        type: "uint64",
      },
    ],
    name: "use",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506200001c62000022565b62000206565b600054610100900460ff1615808015620000435750600054600160ff909116105b8062000073575062000060306200015460201b620004531760201c565b15801562000073575060005460ff166001145b620000dc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000100576000805461ff0019166101001790555b6200010a62000163565b801562000151576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054610100900460ff16620001d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620000d3565b60408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b0217600155565b61136680620002166000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b4b64fbb11610050578063b4b64fbb14610140578063cc731b0214610153578063cff0ab96146101d457600080fd5b80636f1696061461006c5780638129fc1c14610138575b600080fd5b61013661007a366004610fae565b604080516060810182526fffffffffffffffffffffffffffffffff9490941680855267ffffffffffffffff93841660208601819052929093169301839052600180547fffffffffffffffff000000000000000000000000000000000000000000000000169092177001000000000000000000000000000000009091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000909202919091179055565b005b610136610268565b61013661014e366004611008565b6103ff565b61015b610414565b6040516101cb9190600060c08201905063ffffffff80845116835260ff602085015116602084015260ff6040850151166040840152806060850151166060840152806080850151166080840152506fffffffffffffffffffffffffffffffff60a08401511660a083015292915050565b60405180910390f35b60015461022f906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff92831660208501529116908201526060016101cb565b600054610100900460ff16158080156102885750600054600160ff909116105b806102a25750303b1580156102a2575060005460ff166001145b610333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561039157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61039961046f565b80156103fc57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b8060005a905061040f8282610552565b505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261044e61087f565b905090565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b600054610100900460ff16610506576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161032a565b60408051606081018252633b9aca00808252600060208301524367ffffffffffffffff169190920181905278010000000000000000000000000000000000000000000000000217600155565b600154600090610588907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1643611052565b9050600061059461087f565b90506000816020015160ff16826000015163ffffffff166105b59190611098565b905082156106ec576001546000906105ec908390700100000000000000000000000000000000900467ffffffffffffffff16611100565b90506000836040015160ff16836106039190611174565b6001546106239084906fffffffffffffffffffffffffffffffff16611174565b61062d9190611098565b60015490915060009061067e906106579084906fffffffffffffffffffffffffffffffff16611230565b866060015163ffffffff168760a001516fffffffffffffffffffffffffffffffff16610934565b905060018611156106ad576106aa61065782876040015160ff1660018a6106a59190611052565b610951565b90505b6fffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff4316021760015550505b6001805486919060109061071f908490700100000000000000000000000000000000900467ffffffffffffffff166112a4565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816000015163ffffffff16600160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161315610802576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5265736f757263654d65746572696e673a2063616e6e6f7420627579206d6f7260448201527f6520676173207468616e20617661696c61626c6520676173206c696d69740000606482015260840161032a565b60015460009061082e906fffffffffffffffffffffffffffffffff1667ffffffffffffffff88166112d0565b9050600061084048633b9aca006109a6565b61084a908361130d565b905060005a6108599088611052565b905080821115610875576108756108708284611052565b6109bf565b5050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261044e6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526301312d008152600a6020820152600891810191909152633b9aca006060820152620f424060808201526fffffffffffffffffffffffffffffffff60a082015290565b600061094961094385856109e8565b836109f8565b949350505050565b6000670de0b6b3a76400006109926109698583611098565b61097b90670de0b6b3a7640000611100565b61098d85670de0b6b3a7640000611174565b610a07565b61099c9086611174565b6109499190611098565b6000818310156109b657816109b8565b825b9392505050565b6000805a90505b825a6109d29083611052565b101561040f576109e182611321565b91506109c6565b6000818312156109b657816109b8565b60008183126109b657816109b8565b60006109b8670de0b6b3a764000083610a1f86610a38565b610a299190611174565b610a339190611098565b610c7c565b6000808213610aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e45440000000000000000000000000000000000000000000000604482015260640161032a565b60006060610ab084610ebb565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c18213610cad57506000919050565b680755bf798b4a1bf1e58212610d1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4558505f4f564552464c4f570000000000000000000000000000000000000000604482015260640161032a565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093037fffffffffffffffffffffffffffffffffffffffdbf3ccf1604d263450f02a550481018102606090811d6d0277594991cfc85f6e2461837cd9018202811d7fffffffffffffffffffffffffffffffffffffe5adedaa1cb095af9e4da10e363c018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d7ffffffffffffffffffffffffffffffffffffd38dc772608b0ae56cce01296c0eb018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084017ffffffffffffffffffffffffffffffffffffffe2c69812cf03b0763fd454a8f7e010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b6000808211610f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e45440000000000000000000000000000000000000000000000604482015260640161032a565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b803567ffffffffffffffff81168114610fa957600080fd5b919050565b600080600060608486031215610fc357600080fd5b83356fffffffffffffffffffffffffffffffff81168114610fe357600080fd5b9250610ff160208501610f91565b9150610fff60408501610f91565b90509250925092565b60006020828403121561101a57600080fd5b6109b882610f91565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561106457611064611023565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826110a7576110a7611069565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156110fb576110fb611023565b500590565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561113a5761113a611023565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561116e5761116e611023565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156111b5576111b5611023565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156111f0576111f0611023565b6000871292508782058712848416161561120c5761120c611023565b8785058712818416161561122257611222611023565b505050929093029392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561126a5761126a611023565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561129e5761129e611023565b50500190565b600067ffffffffffffffff8083168185168083038211156112c7576112c7611023565b01949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561130857611308611023565b500290565b60008261131c5761131c611069565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361135257611352611023565b506001019056fea164736f6c634300080f000a";

type MeterUserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MeterUserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MeterUser__factory extends ContractFactory {
  constructor(...args: MeterUserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MeterUser> {
    return super.deploy(overrides || {}) as Promise<MeterUser>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MeterUser {
    return super.attach(address) as MeterUser;
  }
  override connect(signer: Signer): MeterUser__factory {
    return super.connect(signer) as MeterUser__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MeterUserInterface {
    return new utils.Interface(_abi) as MeterUserInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MeterUser {
    return new Contract(address, _abi, signerOrProvider) as MeterUser;
  }
}
